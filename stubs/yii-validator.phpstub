<?php

/** @noinspection ALL */

namespace Yiisoft\Validator;

use ArrayIterator;
use IteratorAggregate;

/**
 * Validator validates {@link DataSetInterface} against rules set for data set attributes.
 *
 * @psalm-import-type AggregateRule from \jin2chen\YiiValidator\Validator
 */
interface ValidatorInterface
{
    /**
     * Validate data set against rules set for data set attributes.
     *
     * @param DataSetInterface|mixed|RulesProviderInterface $data Data set to validate.
     * @param Rule[][] $rules
     * @psalm-param AggregateRule $rules
     *
     * @return ResultSet Validation results.
     */
    public function validate($data, iterable $rules = []): ResultSet;
}

/**
 * Allows to have data validation rules together with the data itself.
 * Such object can be passed as an only argument to the {@see ValidatorInterface}.
 *
 * @psalm-import-type AggregateRule from \jin2chen\YiiValidator\Validator
 */
interface RulesProviderInterface extends DataSetInterface
{
    /**
     * @return Rule[][] A set of validation rules.
     * @psalm-return AggregateRule
     */
    public function getRules(): iterable;
}

/**
 * ResultSet stores validation result of each attribute from {@link DataSetInterface}.
 * It is typically obtained by validating data set with {@link Validator}.
 */
final class ResultSet implements IteratorAggregate
{
    /**
     * @return ArrayIterator<string, Result>
     */
    public function getIterator(): ArrayIterator
    {
    }
}
